//　Written by Wu Juanjuan
//　2023.2
//////////////////////////////////////
// Read Me
//　①このツールには、名前が
//　{"*L_*","*_l_*","*Left*","*left*","*_L","*_l","*Lf*","*Lf","*R_*","*_r_*","*Right*","*right*","*_R","*_r","*Rt*","*Rt"}
//　のラベルがついているコントローラーにしか適用しないです。

//　②ツールを使用する時、
//　自動キーオプションの優先順位はツール自動キー＞MAYA標準機能オートキー
//　コントローラーにはすでにキーフレームが打った場合、正しく動作するためにツールの自動キーオプションをオンにする推奨。

//　③複数キーフレームを反転コピーする時、MAYAビューの状態が正しく更新しないためモデルがおかしく見える可能性はあります。
//　このような時にタイムスライダーを少し操作すれば正しい状態に戻ります。

//////////////////////////////////////////////////////////////////////////////////////

//　コントローラーの位置アトリビュートを反転コピーぺ
global proc WJJ_offsetMirrorKey_Proc(){

global int $WJJ_mirKtimeF ;
int $WJJ_mirKtimeB ;
global int $WJJ_frameoffset ;
//　コントローラーを選択、複数可
string $WJJ_mirKsel_con[]=`ls -sl`;
//　今のタイムフレームをゲット
$WJJ_mirKtimeF =`currentTime -query`;
//　オートキー状態をゲット
int $akCheck = `autoKeyframe -q -state`;


int $countNum=0;
// gmatchで左右を検知するためのラベル
string $testNam[]={"*L_*","*_l_*","*Left*","*left*","*_L","*_l","*Lf*","*Lf","*R_*","*_r_*","*Right*","*right*","*_R","*_r","*Rt*","*Rt"};
string $fitNam[]={"L_","_l_","Left","left","_L","_l","Lf","Lf","R_","_r_","Right","right","_R","_r","Rt","Rt"};
global string $WJJ_mirObj_1;
global string $WJJ_mirObj_2;
// gmatchのラベル数のオフセット値をゲット。
//　オフセットを通じて左と右の、対になるラベルを確定する
int $fitofs = size($fitNam)/2 ;

//　選択した複数のコントローラーを反転コピー、開始
for($s=0;$s<size($WJJ_mirKsel_con);$s++){
    
    //　今のコントローラーの反対側の方を探し出す
    for($a=0;$a<size($testNam);$a++){
        //　今のコントローラーの名前に正しい左右ラベルがあるかどうかを検知する
        $countNum=`gmatch $WJJ_mirKsel_con[$s] $testNam[$a]`;
        //　正しい左右ラベルがあれば実行
        if($countNum==1){
            if($a<=$fitofs-1){
                //　今のコントローラーの名前の中のラベルをゲット
                $WJJ_mirObj_1=$fitNam[$a];
                //　反対側のコントローラーの名前の中のラベルをゲット
                $WJJ_mirObj_2=$fitNam[$a+$fitofs];
            }
            else{
                $WJJ_mirObj_1=$fitNam[$a];
                $WJJ_mirObj_2=$fitNam[$a-$fitofs];
            }
            //　確定できたから今回のラベル検知を停止させ
            break;
        }
        else continue;    
    }
    //　今のコントローラーのラベルを特定できない場合、
    //　ネーミングが間違っていると判断んしエラー
    if($countNum!=1)error ($WJJ_mirKsel_con[$s]+"_no fitable name");


    global int $WJJ_offsetMirK[2];
    //　反転パネルのオプションをゲット
    $WJJ_offsetMirK[0]=`radioButtonGrp -q -sl WJJ_offsetMirK0rBG`;
    $WJJ_offsetMirK[1]=`radioButtonGrp -q -sl WJJ_offsetMirK1rBG`;
    $WJJ_offsetMirK[2]=`radioButtonGrp -q -sl WJJ_offsetMirK2rBG`;
   
    string $mir_os[];
    clear $mir_os;
    $mir_os[0]="tx";
    $mir_os[1]="ty";
    $mir_os[2]="tz";
    
    //　今のコントローラーのロック状態をゲット
    int $locked_os[];
    clear $locked_os;
    $locked_os[0]=`getAttr -l ($WJJ_mirKsel_con[$s]+"."+$mir_os[0])`;
    $locked_os[1]=`getAttr -l ($WJJ_mirKsel_con[$s]+"."+$mir_os[1])`;
    $locked_os[2]=`getAttr -l ($WJJ_mirKsel_con[$s]+"."+$mir_os[2])`;
    int $mul_os;
    float $fixed_os;
    
    //　複数フレームのcheckBoxの状態をゲット
    global int $UJ2ForSEswitch ;
    $UJ2ForSEswitch=`checkBoxGrp -q -v1 WJJ_MirKcheckSwithch1`;
    
    global int $UJ2mirKframeS ;
    global int $UJ2mirKframeE ;
    global int $mirKcheckC2 ;
    //　フレームオフセットところの入力数字をゲット
    $WJJ_frameoffset = `intFieldGrp -q -v1 UJ2frameofs` ;
    //　オートキーの影響を削除するために一旦オフ
    //　元々オンであった場合、プロシージャが終わったらまたオン
    if($akCheck==1)autoKeyframe -state 0 ;
    
    for($i=0;$i<size($locked_os);$i++){
	    if($locked_os[$i]==0){
            
            float $cpkey_os;
            //　反対側のコントローラー（ペスト対象）の名前をゲット
	        string $pasteCon_os=`substituteAllString $WJJ_mirKsel_con[$s] $WJJ_mirObj_1 $WJJ_mirObj_2`;
            //　自動キーのcheckBoxの状態をゲット
    	    $mirKcheckC2=`checkBoxGrp -q -v2 WJJ_MirKcheckSwithch1`;

            //　複数フレームのcheckBoxをチェックしてない場合、
            //　今のタイムフレームの移動アトリビュートをコピーぺ
    	    if($UJ2ForSEswitch==0){
                //　今のタイムフレームの移動アトリビュート数値をゲット
    	        $cpkey_os=`getAttr -t $WJJ_mirKtimeF ($WJJ_mirKsel_con[$s]+"."+$mir_os[$i])`;
                //　フレームオフセットの数値を足す
    	        $WJJ_mirKtimeB = ($WJJ_mirKtimeF) + ($WJJ_frameoffset);
    	        
                //　反転パネルをもとに反対側のコントローラーの移動アトリビュート数値を計算
                //　プラス場合
    	        if($WJJ_offsetMirK[$i]==1){
	                $mul_os=1;
	                $fixed_os=($cpkey_os)*($mul_os);
	                setAttr ($pasteCon_os+"."+$mir_os[$i]) $fixed_os ;
                    //　自動キーをオンにした場合反転コピーぺと同時にキーフレームを打つ
	                if($mirKcheckC2 == 1){
	                    if( `getAttr -k ($pasteCon_os+"."+$mir_os[$i])`||`getAttr -channelBox ($pasteCon_os+"."+$mir_os[$i])` ){
	                        setKeyframe -t $WJJ_mirKtimeB ($pasteCon_os+"."+$mir_os[$i]);    
	                    }
	                }
	            }
                //　マイナス場合
	            else if($WJJ_offsetMirK[$i]==2){
	                $mul_os=-1;
	                $fixed_os=($cpkey_os)*($mul_os);
	                setAttr ($pasteCon_os+"."+$mir_os[$i]) $fixed_os ;
                    //　自動キーをオンにした場合反転コピーぺと同時にキーフレームを打つ
	                if($mirKcheckC2 == 1){
	                    if( `getAttr -k ($pasteCon_os+"."+$mir_os[$i])`||`getAttr -channelBox ($pasteCon_os+"."+$mir_os[$i])` ){
	                        setKeyframe -t $WJJ_mirKtimeB ($pasteCon_os+"."+$mir_os[$i]);    
	                    }
	                }
	             }
                
                //　反転パネルでNを選択した場合、
                //　反転コピーがいらないと判断し、何もしない
                else continue;
	             
	        }//if($UJ2ForSEswitch==0)
	        
	        //　複数フレームのcheckBoxをチェックした場合
            //　複数のキーフレームの数値を一気に反対側に転送
	        else if($UJ2ForSEswitch==1){
                //　指定したキーフレームの範囲をゲット
	            $UJ2mirKframeE =`intField -q -v UJ2frameStoE2`;
                $UJ2mirKframeS =`intField -q -v UJ2frameStoE1`;
                
                //　指定した範囲にキーフレームが入いているかどうかを確定する
                int $mirKcnt=`keyframe -t ($UJ2mirKframeS+":"+$UJ2mirKframeE) -q -kc ($WJJ_mirKsel_con[$s]+"."+$mir_os[$i])`;
    	        float $mirKallKtime[]=`keyframe -time ($UJ2mirKframeS+":"+$UJ2mirKframeE) -q -timeChange ($WJJ_mirKsel_con[$s]+"."+$mir_os[$i])`;   
    	        float $mirKallKvalue[]=`keyframe -time ($UJ2mirKframeS+":"+$UJ2mirKframeE) -q -valueChange ($WJJ_mirKsel_con[$s]+"."+$mir_os[$i])`;
	            if($mirKcnt==0)error "no keyframe";
                
	            else{
	                for($tt=0;$tt<size($mirKallKtime);$tt++){
                        //　オフセット済みのフレーム値をゲット
	                    $WJJ_mirKtimeB = ($mirKallKtime[$tt]) + ($WJJ_frameoffset);
	                    //　反転パネルをもとに反対側のコントローラーの移動アトリビュート数値を計算
                        //　プラス場合
	                    if($WJJ_offsetMirK[$i]==1){
	                        $mul_os=1;
	                        $fixed_os=($mirKallKvalue[$tt])*($mul_os);
	                        setAttr ($pasteCon_os+"."+$mir_os[$i]) $fixed_os ;
                            //　自動キーをオンにした場合反転コピーぺと同時にキーフレームを打つ
	                        if($mirKcheckC2 == 1){
	                            if( `getAttr -k ($pasteCon_os+"."+$mir_os[$i])`||`getAttr -channelBox ($pasteCon_os+"."+$mir_os[$i])` ){
	                                setKeyframe -t $WJJ_mirKtimeB ($pasteCon_os+"."+$mir_os[$i]);
	                            }
	                        }
	                    }
	                    //　マイナス場合
	                    else if($WJJ_offsetMirK[$i]==2){
	                        $mul_os=-1;
	                        $fixed_os=($mirKallKvalue[$tt])*($mul_os);
	                        setAttr ($pasteCon_os+"."+$mir_os[$i]) $fixed_os ;
                            //　自動キーをオンにした場合反転コピーぺと同時にキーフレームを打つ
	                        if($mirKcheckC2 == 1){
	                            if( `getAttr -k ($pasteCon_os+"."+$mir_os[$i])`||`getAttr -channelBox ($pasteCon_os+"."+$mir_os[$i])` ){
	                                setKeyframe -t $WJJ_mirKtimeB ($pasteCon_os+"."+$mir_os[$i]);
	                            }
                            }    
	                    }//else if($WJJ_osateMirK[$i]==2)
	                    
	                    else continue;
	                    
	                }//for($tt)
	            
	            }//else($mirKcnt>0)
	            
	            
            }//else if($UJ2ForSEswitch==1)
            
        }//if(locked)
        
    }//for($i)
    //　元々オンであった場合、プロシージャが終わったらまたオン
    if($akCheck==1)autoKeyframe -state 1 ;
}//for(s)

}//proc


//////////////////////////////////////////////////////////////////////////////////////////////////////
//　コントローラーの回転アトリビュートを反転コピーぺ
//　移動・回転・スケールの反転コピーを別々に実行するために三つのプロシージャに分けた
//　コードは移動の時ほとんど一緒なのでコメントなし
global proc WJJ_rotateMirrorKey_Proc(){

global int $WJJ_mirKtimeF ;
int $WJJ_mirKtimeB ;
global int $WJJ_frameoffset ;
string $WJJ_mirKsel_con[]=`ls -sl`;
$WJJ_mirKtimeF =`currentTime -query`;
int $akCheck = `autoKeyframe -q -state`;

int $countNum=0;
string $testNam[]={"*L_*","*_l_*","*Left*","*left*","*_L","*_l","*Lf*","*Lf","*R_*","*_r_*","*Right*","*right*","*_R","*_r","*Rt*","*Rt"};
string $fitNam[]={"L_","_l_","Left","left","_L","_l","Lf","Lf","R_","_r_","Right","right","_R","_r","Rt","Rt"};
global string $WJJ_mirObj_1;
global string $WJJ_mirObj_2;
int $fitofs = size($fitNam)/2 ;
for($s=0;$s<size($WJJ_mirKsel_con);$s++){
    for($a=0;$a<size($testNam);$a++){
        $countNum=`gmatch $WJJ_mirKsel_con[$s] $testNam[$a]`;
        if($countNum==1){
            if($a<=$fitofs-1){
                $WJJ_mirObj_1=$fitNam[$a];
                $WJJ_mirObj_2=$fitNam[$a+$fitofs];
            }
            else{
                $WJJ_mirObj_1=$fitNam[$a];
                $WJJ_mirObj_2=$fitNam[$a-$fitofs];
            }
            break;       
        }
        
        else continue;    
    }
    
    if($countNum!=1)error ($WJJ_mirKsel_con[$s]+"_no fitable name");


    global int $WJJ_rotateMirK[2];
    $WJJ_rotateMirK[0]=`radioButtonGrp -q -sl WJJ_rotateMirK0rBG`;
    $WJJ_rotateMirK[1]=`radioButtonGrp -q -sl WJJ_rotateMirK1rBG`;
    $WJJ_rotateMirK[2]=`radioButtonGrp -q -sl WJJ_rotateMirK2rBG`;
   
    string $mir_rot[];
    clear $mir_rot;
    $mir_rot[0]="rx";
    $mir_rot[1]="ry";
    $mir_rot[2]="rz";

    int $locked_rot[];
    clear $locked_rot;
    $locked_rot[0]=`getAttr -l ($WJJ_mirKsel_con[$s]+"."+$mir_rot[0])`;
    $locked_rot[1]=`getAttr -l ($WJJ_mirKsel_con[$s]+"."+$mir_rot[1])`;
    $locked_rot[2]=`getAttr -l ($WJJ_mirKsel_con[$s]+"."+$mir_rot[2])`;
    int $mul_rot;
    float $fixed_rot;
    //////時間区切り
    global int $UJ2ForSEswitch ;
    $UJ2ForSEswitch=`checkBoxGrp -q -v1 WJJ_MirKcheckSwithch1`;
    
    global int $UJ2mirKframeS ;
    global int $UJ2mirKframeE ;
    global int $mirKcheckC2 ;
    $WJJ_frameoffset = `intFieldGrp -q -v1 UJ2frameofs` ;
    /////
    if($akCheck==1)autoKeyframe -state 0 ;
    for($i=0;$i<size($locked_rot);$i++){
	    if($locked_rot[$i]==0){

            float $cpkey_rot;
	        string $pasteCon_rot=`substituteAllString $WJJ_mirKsel_con[$s] $WJJ_mirObj_1 $WJJ_mirObj_2`;
    	    $mirKcheckC2=`checkBoxGrp -q -v2 WJJ_MirKcheckSwithch1`;

    	    if($UJ2ForSEswitch==0){
    	        $cpkey_rot=`getAttr -t $WJJ_mirKtimeF ($WJJ_mirKsel_con[$s]+"."+$mir_rot[$i])`;
    	        $WJJ_mirKtimeB = ($WJJ_mirKtimeF) + ($WJJ_frameoffset);
    	        
    	        if($WJJ_rotateMirK[$i]==1){
	                $mul_rot=1;
	                $fixed_rot=($cpkey_rot)*($mul_rot);
	                setAttr ($pasteCon_rot+"."+$mir_rot[$i]) $fixed_rot ;
	                if($mirKcheckC2 == 1){
	                    if( `getAttr -k ($pasteCon_rot+"."+$mir_rot[$i])`||`getAttr -channelBox ($pasteCon_rot+"."+$mir_rot[$i])` ){
	                        setKeyframe -t $WJJ_mirKtimeB ($pasteCon_rot+"."+$mir_rot[$i]);    
	                    }
	                }
	            }
	            else if($WJJ_rotateMirK[$i]==2){
	                $mul_rot=-1;
	                $fixed_rot=($cpkey_rot)*($mul_rot);
	                setAttr ($pasteCon_rot+"."+$mir_rot[$i]) $fixed_rot ;
	                if($mirKcheckC2 == 1){
	                    if( `getAttr -k ($pasteCon_rot+"."+$mir_rot[$i])`||`getAttr -channelBox ($pasteCon_rot+"."+$mir_rot[$i])` ){
	                        setKeyframe -t $WJJ_mirKtimeB ($pasteCon_rot+"."+$mir_rot[$i]);    
	                    }
	                }
	             }
	             
	             else continue;
	             
	        }//if($UJ2ForSEswitch==0)
	        
	        
	        else if($UJ2ForSEswitch==1){
	            $UJ2mirKframeE =`intField -q -v UJ2frameStoE2`;
                $UJ2mirKframeS =`intField -q -v UJ2frameStoE1`;
                int $mirKcnt=`keyframe -t ($UJ2mirKframeS+":"+$UJ2mirKframeE) -q -kc ($WJJ_mirKsel_con[$s]+"."+$mir_rot[$i])`;
    	        float $mirKallKtime[]=`keyframe  -time ($UJ2mirKframeS+":"+$UJ2mirKframeE) -q -timeChange ($WJJ_mirKsel_con[$s]+"."+$mir_rot[$i])`;
    	        float $mirKallKvalue[]=`keyframe  -time ($UJ2mirKframeS+":"+$UJ2mirKframeE) -q -valueChange ($WJJ_mirKsel_con[$s]+"."+$mir_rot[$i])`;
    	       
	            if($mirKcnt==0)error "no keyframe";
	            
	            else{
	                for($tt=0;$tt<size($mirKallKtime);$tt++){
	                    $WJJ_mirKtimeB = ($mirKallKtime[$tt]) + ($WJJ_frameoffset);
	                    if($WJJ_rotateMirK[$i]==1){
	                        $mul_rot=1;
	                        $fixed_rot=($mirKallKvalue[$tt])*($mul_rot);
	                
	                        setAttr ($pasteCon_rot+"."+$mir_rot[$i]) $fixed_rot ;
	                        if($mirKcheckC2 == 1){
	                            if( `getAttr -k ($pasteCon_rot+"."+$mir_rot[$i])`||`getAttr -channelBox ($pasteCon_rot+"."+$mir_rot[$i])` ){
	                                setKeyframe -t $WJJ_mirKtimeB ($pasteCon_rot+"."+$mir_rot[$i]);
	                            }
	                        }
	                    }
	                    else if($WJJ_rotateMirK[$i]==2){
	                        $mul_rot=-1;
	                        $fixed_rot=($mirKallKvalue[$tt])*($mul_rot);
	                        
	                        setAttr ($pasteCon_rot+"."+$mir_rot[$i]) $fixed_rot ;
	                        if($mirKcheckC2 == 1){
	                            if( `getAttr -k ($pasteCon_rot+"."+$mir_rot[$i])`||`getAttr -channelBox ($pasteCon_rot+"."+$mir_rot[$i])` ){
	                                setKeyframe -t $WJJ_mirKtimeB ($pasteCon_rot+"."+$mir_rot[$i]);
	                            }
                            }    
	                    }//else if($WJJ_rotateMirK[$i]==2)
	                    
	                    else continue;
	                    
	                }//for($tt)
	                
	            }//else($mirKcnt>0)
	            
            }//else if($UJ2ForSEswitch==1)
            
        }//if(locked)
        
    }//for($i)
    
    if($akCheck==1)autoKeyframe -state 1 ;
}//for(s)

}//proc

///////////////////////////////////////////////////////////////////////////////////////////////////

//　コントローラーの回転アトリビュートを反転コピーぺ
//　移動・回転・スケールの反転コピーを別々に実行するために三つのプロシージャに分けた
//　コードは移動の時ほとんど一緒なのでコメントなし
global proc WJJ_scaleMirrorKey_Proc(){

global int $WJJ_mirKtimeF ;
int $WJJ_mirKtimeB ;
global int $WJJ_frameoffset ;
string $WJJ_mirKsel_con[]=`ls -sl`;
$WJJ_mirKtimeF =`currentTime -query`;
int $akCheck = `autoKeyframe -q -state`;

int $countNum=0;
string $testNam[]={"*L_*","*_l_*","*Left*","*left*","*_L","*_l","*Lf*","*Lf","*R_*","*_r_*","*Right*","*right*","*_R","*_r","*Rt*","*Rt"};
string $fitNam[]={"L_","_l_","Left","left","_L","_l","Lf","Lf","R_","_r_","Right","right","_R","_r","Rt","Rt"};
global string $WJJ_mirObj_1;
global string $WJJ_mirObj_2;
int $fitofs = size($fitNam)/2 ;
for($s=0;$s<size($WJJ_mirKsel_con);$s++){

    for($a=0;$a<size($testNam);$a++){
    	$countNum=`gmatch $WJJ_mirKsel_con[$s] $testNam[$a]`;
    	if($countNum==1){
    	    if($a<=$fitofs-1){
    	        $WJJ_mirObj_1=$fitNam[$a];
    	        $WJJ_mirObj_2=$fitNam[$a+$fitofs];
    	    }
    	    else{
    	        $WJJ_mirObj_1=$fitNam[$a];
    	        $WJJ_mirObj_2=$fitNam[$a-$fitofs];
    	    }
    	    break;   
    	}
    	else continue;
    
    }
    if($countNum!=1)error ($WJJ_mirKsel_con[$s]+"_no fitable name");


    global int $WJJ_scaleMirK[2];
    $WJJ_scaleMirK[0]=`radioButtonGrp -q -sl WJJ_scaleMirK0rBG`;
    $WJJ_scaleMirK[1]=`radioButtonGrp -q -sl WJJ_scaleMirK1rBG`;
    $WJJ_scaleMirK[2]=`radioButtonGrp -q -sl WJJ_scaleMirK2rBG`;


    string $mir_scl[];
    clear $mir_scl;
    $mir_scl[0]="sx";
    $mir_scl[1]="sy";
    $mir_scl[2]="sz";

    int $locked_scl[];
    clear $locked_scl;
    $locked_scl[0]=`getAttr -l ($WJJ_mirKsel_con[$s]+"."+$mir_scl[0])`;
    $locked_scl[1]=`getAttr -l ($WJJ_mirKsel_con[$s]+"."+$mir_scl[1])`;
    $locked_scl[2]=`getAttr -l ($WJJ_mirKsel_con[$s]+"."+$mir_scl[2])`;

    int $mul_scl;
    float $fixed_scl;
    
    //////
    global int $UJ2ForSEswitch ;
    $UJ2ForSEswitch=`checkBoxGrp -q -v1 WJJ_MirKcheckSwithch1`;

    global int $UJ2mirKframeS ;
    global int $UJ2mirKframeE ;
    global int $mirKcheckC2 ;
    $WJJ_frameoffset = `intFieldGrp -q -v1 UJ2frameofs` ;
    /////
    
    if($akCheck==1)autoKeyframe -state 0 ;
    for($i=0;$i<size($locked_scl);$i++){
	    if($locked_scl[$i]==0){

            float $cpkey_scl;
	        string $pasteCon_scl=`substituteAllString $WJJ_mirKsel_con[$s] $WJJ_mirObj_1 $WJJ_mirObj_2`;
            $mirKcheckC2=`checkBoxGrp -q -v2 WJJ_MirKcheckSwithch1`;
            
            if($UJ2ForSEswitch==0){
                $cpkey_scl=`getAttr -t $WJJ_mirKtimeF ($WJJ_mirKsel_con[$s]+"."+$mir_scl[$i])`;
                $WJJ_mirKtimeB = ($WJJ_mirKtimeF) + ($WJJ_frameoffset);
                if($WJJ_scaleMirK[$i]==1){
	                $mul_scl=1;
	                $fixed_scl=($cpkey_scl)*($mul_scl);
	                setAttr ($pasteCon_scl+"."+$mir_scl[$i]) $fixed_scl ;
	                if($mirKcheckC2 == 1){
	                    if( `getAttr -k ($pasteCon_scl+"."+$mir_scl[$i])`||`getAttr -channelBox ($pasteCon_scl+"."+$mir_scl[$i])` ){
	                       setKeyframe -t $WJJ_mirKtimeB ($pasteCon_scl+"."+$mir_scl[$i]);
	                    }
	                }
	            }
	            else if($WJJ_scaleMirK[$i]==2){
	                $mul_scl=-1;
    	            $fixed_scl=($cpkey_scl)*($mul_scl);
	                setAttr ($pasteCon_scl+"."+$mir_scl[$i]) $fixed_scl ;
	                if($mirKcheckC2 == 1){
	                    if( `getAttr -k ($pasteCon_scl+"."+$mir_scl[$i])`||`getAttr -channelBox ($pasteCon_scl+"."+$mir_scl[$i])` ){
	                        setKeyframe -t $WJJ_mirKtimeB ($pasteCon_scl+"."+$mir_scl[$i]);
	                    }
	                }
	            }
	            else continue;

            }
            
            else if($UJ2ForSEswitch==1){
                $UJ2mirKframeE =`intField -q -v UJ2frameStoE2`;
                $UJ2mirKframeS =`intField -q -v UJ2frameStoE1`;
                int $mirKcnt=`keyframe  -time ($UJ2mirKframeS+":"+$UJ2mirKframeE)  -q -kc ($WJJ_mirKsel_con[$s]+"."+$mir_scl[$i])`;
    	        float $mirKallKtime[]=`keyframe  -time ($UJ2mirKframeS+":"+$UJ2mirKframeE)  -q -timeChange ($WJJ_mirKsel_con[$s]+"."+$mir_scl[$i])`;
    	        float $mirKallKvalue[]=`keyframe  -time ($UJ2mirKframeS+":"+$UJ2mirKframeE)  -q -valueChange ($WJJ_mirKsel_con[$s]+"."+$mir_scl[$i])`;
    	       
    	        if($mirKcnt==0)error "no keyframe";
    	        else{
    	            for($tt=0;$tt<size($mirKallKtime);$tt++){
    	                $WJJ_mirKtimeB = ($mirKallKtime[$tt]) + ($WJJ_frameoffset);
    	                if($WJJ_scaleMirK[$i]==1){
	                        $mul_scl=1;
	                        $fixed_scl=($mirKallKvalue[$tt])*($mul_scl);
	                        	       
	                        setAttr ($pasteCon_scl+"."+$mir_scl[$i]) $fixed_scl ;
	                        if($mirKcheckC2 == 1){
	                            if( `getAttr -k ($pasteCon_scl+"."+$mir_scl[$i])`||`getAttr -channelBox ($pasteCon_scl+"."+$mir_scl[$i])` ){
	                               setKeyframe -t $WJJ_mirKtimeB ($pasteCon_scl+"."+$mir_scl[$i]);  
	                            }
	                        }
	                    }
	                    else if($WJJ_scaleMirK[$i]==2){
	                        $mul_scl=-1;
    	                    $fixed_scl=($mirKallKvalue[$tt])*($mul_scl);
    
	                        setAttr ($pasteCon_scl+"."+$mir_scl[$i]) $fixed_scl ;
	                        if($mirKcheckC2 == 1){
	                            if( `getAttr -k ($pasteCon_scl+"."+$mir_scl[$i])`||`getAttr -channelBox ($pasteCon_scl+"."+$mir_scl[$i])` ){
	                                setKeyframe -t $WJJ_mirKtimeB ($pasteCon_scl+"."+$mir_scl[$i]);
	                            }
	                        }
	                    }//else if($WJJ_scaleMirK[$i]==2)
	                    
	                    else continue;
	                    
	                }//for
	                
	            }//else($mirKcnt>0)
	            
	               
            }//else if($UJ2ForSEswitch==1)
            
	    }//if(locked)
    }//for($i)
    
    if($akCheck==1)autoKeyframe -state 1 ;
}//for($s)
    
}//proc

//////////////////////////////////////////////////////////////////////////////////////
//　移動・回転・スケールの反転コピーを一緒に実行したい場合
global proc WJJ_allTransformMirrorKey_Proc(){
    WJJ_offsetMirrorKey_Proc;
    WJJ_rotateMirrorKey_Proc;
    WJJ_scaleMirrorKey_Proc;
}

///////////////////////////////////////////////////////////////////////////////////////////
//　ツールUI

global proc WJJ_miKchangeUI_Proc(){
    //　複数キーフレームcheckBoxをオンにしたら
    //　フレーム入力枠を入力可能にする
    global int $UJ2ForSEswitch ;
    $UJ2ForSEswitch=`checkBoxGrp -q -v1 WJJ_MirKcheckSwithch1`;
    if($UJ2ForSEswitch==1){
        intField -e -editable 1 -minValue 1 -step 2 UJ2frameStoE1 ;
        intField -e -editable 1 -minValue 1 -step 2 UJ2frameStoE2 ;
        checkBoxGrp -e -v2 1 WJJ_MirKcheckSwithch1 ;
    }
    else{
        intField -e -editable 0 UJ2frameStoE1 ;
        intField -e -editable 0 UJ2frameStoE2 ;
    }
}


global proc WJJ_miKchangeUI2_Proc(){
    //　自動キーを外したら
    //　複数キーフレームところのチェックも自動に外す
    global int $mirKcheckC2 ;
    $mirKcheckC2=`checkBoxGrp -q -v2 WJJ_MirKcheckSwithch1`;
    if($mirKcheckC2==0){
        checkBoxGrp -e -v1 0 WJJ_MirKcheckSwithch1 ;
        intField -e -editable 0 UJ2frameStoE1 ;
        intField -e -editable 0 UJ2frameStoE2 ;
    }
}


//////////////////////////////////////////////////////////////////////////////////////////////

global proc UJ2MotionMirror(){

if((`window -ex  WJJ_KeyframeMirror_win`)==1)deleteUI -window WJJ_KeyframeMirror_win;
window -wh 260 480 -t "UJ2MotionMirror v1.0" WJJ_KeyframeMirror_win ;
    columnLayout -adj 1 WJJ_KeyframeMirror_cL;
    
    //移動パネル
    separator -height 20 -style "in";
    radioButtonGrp -l "反転軸：" -nrb 3 -la3 "X" "-X" "N" -cw4 70 60 60 60 -select 3 WJJ_offsetMirK0rBG;
    radioButtonGrp -l "" -nrb 3 -la3 "Y" "-Y" "N" -cw4 70 60 60 60 -select 3 WJJ_offsetMirK1rBG;
    radioButtonGrp -l "" -nrb 3 -la3 "Z" "-Z" "N" -cw4 70 60 60 60 -select 3 WJJ_offsetMirK2rBG;
    button -l "移動" -c "WJJ_offsetMirrorKey_Proc" -h 30;
    
    //回転パネル
    separator -height 10 -style "in";
    radioButtonGrp -l "反転軸：" -nrb 3 -la3 "X" "-X" "N" -cw4 70 60 60 60 -select 3 WJJ_rotateMirK0rBG;
    radioButtonGrp -l "" -nrb 3 -la3 "Y" "-Y" "N" -cw4 70 60 60 60 -select 3 WJJ_rotateMirK1rBG;
    radioButtonGrp -l "" -nrb 3 -la3 "Z" "-Z" "N" -cw4 70 60 60 60 -select 3 WJJ_rotateMirK2rBG;
    button -l "回転" -c "WJJ_rotateMirrorKey_Proc" -h 30;
    
    //スケールパネル
    separator -height 10 -style "in";
    radioButtonGrp -l "反転軸：" -nrb 3 -la3 "X" "-X" "N" -cw4 70 60 60 60 -select 3 WJJ_scaleMirK0rBG;
    radioButtonGrp -l "" -nrb 3 -la3 "Y" "-Y" "N" -cw4 70 60 60 60 -select 3 WJJ_scaleMirK1rBG;
    radioButtonGrp -l "" -nrb 3 -la3 "Z" "-Z" "N" -cw4 70 60 60 60 -select 3 WJJ_scaleMirK2rBG;
    button -l "スケール" -c "WJJ_scaleMirrorKey_Proc" -h 30;
    
    
    separator -height 10 -style "in";
    button -l "反転コピー" -c "WJJ_allTransformMirrorKey_Proc" -h 50;
    separator -height 10 -style "in";
    
    formLayout -nd 100 WJJmirKframeWin;

    text -l "フレーム入力：" -align "right" UJ2textMirK1;
    intField -editable 0 -minValue 1 -step 2 UJ2frameStoE1;
    intField -editable 0 -minValue 1 -step 2 UJ2frameStoE2;
    checkBoxGrp -ncb 2 -l "" -la2 "複数フレーム" "自動キー" -on1 "WJJ_miKchangeUI_Proc" -of1 "WJJ_miKchangeUI_Proc" -of2 "WJJ_miKchangeUI2_Proc" WJJ_MirKcheckSwithch1 ;
    intFieldGrp -l "フレームオフセット：" -nf 1 UJ2frameofs ;

    formLayout -e
    -af UJ2textMirK1 left 5 -af UJ2textMirK1 top 5 -ap UJ2textMirK1 right 5 30
    -ac UJ2frameStoE1 left 5 UJ2textMirK1 -af UJ2frameStoE1 top 5 -ap UJ2frameStoE1 right 5 68
    -ac UJ2frameStoE2 left 5 UJ2frameStoE1 -af UJ2frameStoE2 top 5 -af UJ2frameStoE2 right 5 
    -af WJJ_MirKcheckSwithch1 left -100 -ac WJJ_MirKcheckSwithch1 top 5 UJ2frameStoE2 -af WJJ_MirKcheckSwithch1 right 5
    -af UJ2frameofs left -7 -ac UJ2frameofs top 5 WJJ_MirKcheckSwithch1 -af UJ2frameofs right 5


    WJJmirKframeWin;
    
showWindow WJJ_KeyframeMirror_win;

}

UJ2MotionMirror;